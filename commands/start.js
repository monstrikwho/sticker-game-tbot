const setupScenes = require("../scens/setupScenes");

const moment = require("moment");

const User = require("../models/user");
const MainStats = require("../models/mainStats");
const DayStats = require("../models/dayStats");

function setupStart(bot) {
  // Setup scens
  setupScenes(bot);

  // Start command
  bot.start(async (ctx) => {
    if (+ctx.chat.id < 0) return; // –û—Ç–∫–∏–¥—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –ø–∞–±–ª–∏–∫–∞—Ö

    try {
      const startPayload = ctx.startPayload;

      let isRef = 1; // id or 1
      let bouns = 0;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
      let payloadType =
        startPayload.indexOf("ref") !== -1
          ? "ref"
          : startPayload.indexOf("ads") !== -1
          ? "ads"
          : "other";

      // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –±—ã–ª –ø–æ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ
      if (payloadType !== "other") {
        if (payloadType === "ref") {
          const refUserId = startPayload.replace("ref", "");
          try {
            const status = await User.findOne({ userId: refUserId });
            if (status) {
              isRef = refUserId;
              bouns = 10000;
            }
            
            await MainStats.updateOne(
              {},
              { $inc: { "usersStats.countRefUsers": 1 } }
            );

            await DayStats.updateOne(
              { date: moment().format("YYYY-MM-DD") },
              { $inc: { "users.refUsers": 1 } }
            );
          } catch (error) {}
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∫–ª–∞–º—ã
        if (payloadType === "ads") {
          const { ads } = await MainStats.findOne({});
          const adsName = startPayload.replace("ads", "");
          if (ads[adsName]) {
            await MainStats.updateOne(
              {},
              {
                ads: {
                  $inc: {
                    [adsName]: 1,
                  },
                },
              }
            );
          } else {
            await MainStats.updateOne({}, { ads: { ...ads, [adsName]: 1 } });
          }
        }
      }

      const selectUser = await User.findOne({ userId: ctx.from.id });
      if (!selectUser) {
        try {
          const user = new User({
            userId: ctx.from.id,
            demoBalance: 2000 + bouns,
            mainBalance: 0,
            isBlocked: false,
            isRef,
            amountRefCash: 0,
            regDate: moment().format("YYYY-MM-DD"),
          });
          await user.save();

          // Send stats
          await axios
            .post("https://dice-bots.ru/api/post_stats", {
              type: "users",
            })
            .then((res) => console.log(res))
            .catch((e) => console.log(e));
        } catch (error) {}
      } else {
        await User.findOne({ userId: ctx.from.id }, { isBlocked: false });
        return await ctx.scene.enter("showMainMenu");
      }

      await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —á–µ—Å—Ç–Ω—ã—Ö –æ–Ω–ª–∞–π–Ω –∏–≥—Ä!
–ó–¥–µ—Å—å —É–¥–∞—á–∞ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –≤–∞—Å!üåà

–í—ã —Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–∞–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∏–∫–µ—Ä –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º, –∞ –º—ã —Å—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–ª–∞—Ç–∏–º –í–∞–º –¥–µ–Ω—å–≥–∏! üí∏

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–û –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!üéâ`);
      return await ctx.scene.enter("showMainMenu");
    } catch (err) {
      console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", err.message);
    }
  });
}

module.exports = setupStart;
