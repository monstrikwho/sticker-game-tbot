const { bot } = require("../init/startBot");
const User = require("../models/user");
const Extra = require("telegraf/extra");

const axios = require("axios");
const moment = require("moment");
const isNumber = require("is-number");

const extraBoard = require("./footballExtra");
const MainStats = require("../models/mainStats");
const InfoGames = require("../models/infoGames");

let message = ({ balance }) => `–î–µ–ª–∞–π—Ç–µ –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏.
–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} ‚ÇΩ`;

module.exports = (game) => {
  game.action("üóë –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫–∏", async (ctx) => {
    let state = ctx.session.state;

    // –ï—Å–ª–∏ —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (state.countRate === 0)
      return await ctx.answerCbQuery("–°—Ç–∞–≤–∫–æ –Ω–µ –±—ã–ª–æ", true);

    const { mainBalance, demoBalance } = await User.findOne({
      userId: ctx.from.id,
    });

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–µ–π—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç –∏ –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    state.rate = {
      goal: 0,
      out: 0,
    };
    state.countRate = 0;
    state.balance = state.activeGame === "mainGame" ? mainBalance : demoBalance;
    ctx.session.state = state; // Save in session

    // –ß–∏—Å—Ç–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    try {
      await bot.telegram.editMessageText(
        ctx.from.id,
        state.activeBoard.message_id,
        null,
        message(state),
        extraBoard(state)
      );
    } catch (error) {
      console.log(error.message);
    }
  });

  game.action(/–ó–∞–±–∏–ª/, async (ctx) => {
    let state = ctx.session.state;

    const amountRate = state.otherRateActive
      ? +state.otherRate
      : +state.valueRate;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - amountRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    }

    if (amountRate === 0) {
      return await ctx.answerCbQuery("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 0‚ÇΩ", true);
    }

    state.balance = Math.floor((state.balance - amountRate) * 100) / 100;
    state.rate["goal"] += amountRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    try {
      await bot.telegram.editMessageText(
        ctx.from.id,
        state.activeBoard.message_id,
        null,
        message(state),
        extraBoard(state)
      );
    } catch (error) {
      console.log(error.message);
    }
  });

  game.action(/–ü—Ä–æ–º–∞—Ö/, async (ctx) => {
    let state = ctx.session.state;

    const amountRate = state.otherRateActive
      ? +state.otherRate
      : +state.valueRate;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - amountRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    }

    if (amountRate === 0) {
      return await ctx.answerCbQuery("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 0‚ÇΩ", true);
    }

    state.balance = Math.floor((state.balance - amountRate) * 100) / 100;
    state.rate["out"] += amountRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    try {
      await bot.telegram.editMessageText(
        ctx.from.id,
        state.activeBoard.message_id,
        null,
        message(state),
        extraBoard(state)
      );
    } catch (error) {
      console.log(error.message);
    }
  });

  game.action(/(?:10‚ÇΩ|50‚ÇΩ|100‚ÇΩ|500‚ÇΩ|1000‚ÇΩ)/, async (ctx) => {
    const value = ctx.update.callback_query.data
      .replace(/\D+/, "")
      .replace("‚ÇΩ", "");
    let state = ctx.session.state;

    if (state.valueRate === +value)
      return await ctx.answerCbQuery("–†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω", true);

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    state.valueRate = +value;
    state.otherRateActive = false;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    try {
      await bot.telegram.editMessageText(
        ctx.from.id,
        state.activeBoard.message_id,
        null,
        message(state),
        extraBoard(state)
      );
    } catch (error) {
      console.log(error.message);
    }
  });

  game.action(/–î—Ä—É–≥–∞—è —Å—É–º–º–∞/, async (ctx) => {
    if (ctx.session.state.otherRateActive && ctx.session.state.otherRate < 1) {
      return await ctx.answerCbQuery(
        "–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ —á–∞—Ç —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏.",
        true
      );
    }

    ctx.session.state = {
      ...ctx.session.state,
      valueRate: 0,
      otherRate: 0,
      otherRateActive: true,
    };

    const state = ctx.session.state;

    await ctx.answerCbQuery(
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ.",
      true
    );

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    try {
      await bot.telegram.editMessageText(
        ctx.from.id,
        state.activeBoard.message_id,
        null,
        message(state),
        extraBoard(state)
      );
    } catch (error) {
      console.log(error.message);
    }
  });

  game.on("text", async (ctx) => {
    const msg = ctx.update.message.text.replace(/-/, "");

    if (!ctx.session.state.otherRateActive) return;

    if (!isNumber(msg))
      return await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã.");

    if (ctx.session.state.balance < msg)
      return await ctx.reply(
        "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å."
      );

    if (+msg < +process.env.MIN_RATE) {
      return await ctx.reply(
        `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${process.env.MIN_RATE}‚ÇΩ`
      );
    }

    ctx.session.state = {
      ...ctx.session.state,
      valueRate: 0,
      otherRate: msg,
    };

    await ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏: ${msg}‚ÇΩ`);

    const state = ctx.session.state;

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É"
    try {
      await ctx.deleteMessage(state.activeBoard.message_id);
    } catch (error) {
      console.log(error.message);
    }

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    try {
      ctx.session.state.activeBoard = await bot.telegram.sendMessage(
        ctx.from.id,
        message(state),
        extraBoard(state)
      );
    } catch (error) {
      console.log(error.message);
    }
  });

  game.action("–£–¥–∞—Ä–∏—Ç—å –ø–æ –≤–æ—Ä–æ—Ç–∞–º ‚öΩÔ∏è", async (ctx) => {
    const state = ctx.session.state;
    const amountRate = state.rate["out"] + state.rate["goal"];

    if (state.countRate === 0) {
      return ctx.answerCbQuery(
        "–í—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã —É–¥–∞—Ä–∏—Ç—å –º—è—á.",
        true
      );
    }

    try {
      await ctx.deleteMessage(ctx.session.state.activeBoard.message_id);
    } catch (error) {}

    const diceMsg = await bot.telegram.sendDice(ctx.from.id, { emoji: "‚öΩÔ∏è" });
    const value = diceMsg.dice.value;

    let winSum = 0;
    let resMsg = "–í—ã –±—ã–ª–∏ –±–ª–∏–∑–∫–æ! –ù–µ —Å–¥–∞–≤–∞–π–µ—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç!";

    if (value === 3 || value === 4 || value === 5) {
      winSum += state.rate["goal"] * 1.35;
    }

    if (value === 1 || value === 2) {
      winSum += state.rate["out"] * 2.05;
    }

    if (winSum > 0) resMsg = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ";

    ctx.session.state.balance += winSum;
    ctx.session.state.rateMenu = false;

    setTimeout(async () => {
      ctx.session.state.activeBoard = await ctx.reply(
        `${resMsg}
        
  –í–∞—à–∞ –æ–±—â–∞—è —Å—Ç–∞–≤–∫–∞ - ${amountRate}
  –í–∞—à –≤—ã–∏–≥—Ä—ã—à - ${Math.floor(winSum * 100) / 100}
  –í–∞—à –±–∞–ª–∞–Ω—Å - ${Math.floor(ctx.session.state.balance * 100) / 100}`,
        Extra.markup((m) =>
          m.inlineKeyboard([
            [
              m.callbackButton(
                "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É",
                "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É"
              ),
              m.callbackButton("–£–¥–∞—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", "–£–¥–∞—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑"),
            ],
          ])
        )
      );
    }, 4000);

    if (state.activeGame === "mainGame") {
      await User.updateOne(
        { userId: ctx.from.id },
        { mainBalance: Math.floor(ctx.session.state.balance * 100) / 100 }
      );
    }
    if (state.activeGame === "demoGame") {
      await User.updateOne(
        { userId: ctx.from.id },
        { demoBalance: Math.floor(ctx.session.state.balance * 100) / 100 }
      );
    }

    // Send stats
    await axios
      .post("https://dice-bots.ru/api/post_stats", {
        type: "games",
        data: {
          typeGame: "football",
          typeBalance: state.activeGame,
          result: winSum > 0 ? "win" : "lose",
          rateAmount: amountRate,
          rateWinAmount: winSum,
          rateValue: value,
          rate: state.rate,
          userId: ctx.chat.id,
          date: moment().format("YYYY-MM-DD"),
        },
      })
      .then((res) => console.log(res))
      .catch((e) => console.log(e));
  });

  game.action(/–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É/, async (ctx) => {
    let state = ctx.session.state;

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É"
    try {
      await ctx.deleteMessage(state.activeBoard.message_id);
    } catch (error) {}

    const { mainBalance, demoBalance } = await User.findOne({
      userId: ctx.from.id,
    });

    state.rate = {
      goal: 0,
      out: 0,
    };
    state.countRate = 0;
    state.balance = state.activeGame === "mainGame" ? mainBalance : demoBalance;
    ctx.session.state = state;
    ctx.session.state.rateMenu = true;

    ctx.session.state.activeBoard = await ctx.reply(
      message(state),
      extraBoard(state)
    );
  });

  game.action(/–£–¥–∞—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑/, async (ctx) => {
    let state = ctx.session.state;
    const amountRate = state.rate["out"] + state.rate["goal"];

    if (state.balance - amountRate < 0) {
      return ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –ª–∏–±–æ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –º–µ–Ω—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º.",
        true
      );
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É"
    try {
      await ctx.deleteMessage(state.activeBoard.message_id);
    } catch (error) {}

    const diceMsg = await bot.telegram.sendDice(ctx.from.id, { emoji: "‚öΩÔ∏è" });
    const value = diceMsg.dice.value;

    state.balance -= amountRate;
    ctx.session.state = state;

    let winSum = 0;
    let resMsg = "–í—ã –±—ã–ª–∏ –±–ª–∏–∑–∫–æ! –ù–µ —Å–¥–∞–≤–∞–π–µ—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç!";

    if (value === 3 || value === 4 || value === 5) {
      winSum += state.rate["goal"] * 1.35;
    }

    if (value === 1 || value === 2) {
      winSum += state.rate["out"] * 2.05;
    }

    if (winSum > 0) resMsg = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ";

    ctx.session.state.balance += winSum;

    setTimeout(async () => {
      ctx.session.state.activeBoard = await ctx.reply(
        `${resMsg}
        
  –í–∞—à–∞ –æ–±—â–∞—è —Å—Ç–∞–≤–∫–∞ - ${amountRate}
  –í–∞—à –≤—ã–∏–≥—Ä—ã—à - ${Math.floor(winSum * 100) / 100}
  –í–∞—à –±–∞–ª–∞–Ω—Å - ${Math.floor(ctx.session.state.balance * 100) / 100}`,
        Extra.markup((m) =>
          m.inlineKeyboard([
            [
              m.callbackButton(
                "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É",
                "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É"
              ),
              m.callbackButton("–£–¥–∞—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", "–£–¥–∞—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑"),
            ],
          ])
        )
      );
    }, 4000);

    if (state.activeGame === "mainGame") {
      await User.updateOne(
        { userId: ctx.from.id },
        { mainBalance: Math.floor(ctx.session.state.balance * 100) / 100 }
      );
    }
    if (state.activeGame === "demoGame") {
      await User.updateOne(
        { userId: ctx.from.id },
        { demoBalance: Math.floor(ctx.session.state.balance * 100) / 100 }
      );
    }

    // Send stats
    await axios
      .post("https://dice-bots.ru/api/post_stats", {
        type: "games",
        data: {
          typeGame: "football",
          typeBalance: state.activeGame,
          result: winSum > 0 ? "win" : "lose",
          rateAmount: amountRate,
          rateWinAmount: winSum,
          rateValue: value,
          rate: state.rate,
          userId: ctx.chat.id,
          date: moment().format("YYYY-MM-DD"),
        },
      })
      .then((res) => console.log(res))
      .catch((e) => console.log(e));
  });

  game.on("dice", async (ctx) => {
    if (ctx.update.message.forward_date) return;

    const dice = ctx.update.message.dice;

    if (dice.emoji !== "‚öΩ") return;

    const value = dice.value;
    const state = ctx.session.state;
    const amountRate = state.rate["out"] + state.rate["goal"];

    if (state.rateMenu) {
      // –ï—Å–ª–∏ –±—Ä–æ—Å–∞–µ–º –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏
      if (state.countRate === 0) {
        return ctx.reply(
          "–í—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã —É–¥–∞—Ä–∏—Ç—å –º—è—á."
        );
      }
      ctx.session.state.rateMenu = false;
    } else {
      // –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –±—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑ —Å —Ç–æ–π –∂–µ —Å—Ç–∞–≤–∫–æ–π
      if (state.balance - amountRate < 0) {
        return ctx.reply(
          "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –ª–∏–±–æ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –º–µ–Ω—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º."
        );
      }
      ctx.session.state.balance -= amountRate;
    }

    try {
      await ctx.deleteMessage(ctx.session.state.activeBoard.message_id);
    } catch (error) {}

    let winSum = 0;
    let resMsg = "–í—ã –±—ã–ª–∏ –±–ª–∏–∑–∫–æ! –ù–µ —Å–¥–∞–≤–∞–π–µ—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç!";

    if (value === 3 || value === 4 || value === 5) {
      winSum += state.rate["goal"] * 1.35;
    }

    if (value === 1 || value === 2) {
      winSum += state.rate["out"] * 2.05;
    }

    if (winSum > 0) resMsg = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ";

    ctx.session.state.balance += winSum;

    setTimeout(async () => {
      ctx.session.state.activeBoard = await ctx.reply(
        `${resMsg}
        
–í–∞—à–∞ –æ–±—â–∞—è —Å—Ç–∞–≤–∫–∞ - ${amountRate}
–í–∞—à –≤—ã–∏–≥—Ä—ã—à - ${Math.floor(winSum * 100) / 100}
–í–∞—à –±–∞–ª–∞–Ω—Å - ${Math.floor(ctx.session.state.balance * 100) / 100}`,
        Extra.markup((m) =>
          m.inlineKeyboard([
            [
              m.callbackButton(
                "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É",
                "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É"
              ),
              m.callbackButton("–£–¥–∞—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", "–£–¥–∞—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑"),
            ],
          ])
        )
      );
    }, 4000);

    if (state.activeGame === "mainGame") {
      await User.updateOne(
        { userId: ctx.from.id },
        { mainBalance: Math.floor(ctx.session.state.balance * 100) / 100 }
      );
    }
    if (state.activeGame === "demoGame") {
      await User.updateOne(
        { userId: ctx.from.id },
        { demoBalance: Math.floor(ctx.session.state.balance * 100) / 100 }
      );
    }

    // Send stats
    await axios
      .post("https://dice-bots.ru/api/post_stats", {
        type: "games",
        data: {
          typeGame: "football",
          typeBalance: state.activeGame,
          result: winSum > 0 ? "win" : "lose",
          rateAmount: amountRate,
          rateWinAmount: winSum,
          rateValue: value,
          rate: state.rate,
          userId: ctx.chat.id,
          date: moment().format("YYYY-MM-DD"),
        },
      })
      .then((res) => console.log(res))
      .catch((e) => console.log(e));
  });
};
